name: build-and-archive-angular-app
on: [push]
jobs:
  build-test:
    runs-on: "ubuntu-latest"
    steps:    
      - name: Checkout repository
        uses: "actions/checkout@v2"
      - name: Setup Node-Environment
        uses: "actions/setup-node@v2"
        with:
          node-version: '12'
      - name: Build optimized web application
        run: |
          npm ci
          npm run build --prod

      - name: request access token from Okta
        run: |
          curl \
          --location --request POST 'https://${{ secrets.TRICENTIS_TENANT }}.oktapreview.com/oauth2/default/v1/token' \
          --header 'Content-Type: application/x-www-form-urlencoded' \
          --data-urlencode 'grant_type=client_credentials' \
          --data-urlencode 'client_id=E2G_Agents' \
          --data-urlencode 'client_secret=${{ secrets.OKTA_CLIENT_SECRET }}' \
          --data-urlencode 'scope=E2GApi' \
          --output response.json

      - name: persist access token in environment $GITHUB_ENV
        run: echo "TRICENTIS_ACCESS_TOKEN=$(cat response.json | jq -r .access_token)" >> $GITHUB_ENV

      - name: trigger test flow execution on Tricentis Elastic Execution Grid
        run: |
          curl \
          --location --request POST 'https://${{ secrets.TRICENTIS_TENANT }}.my.tricentis.com/default/_e2g/api/flowExecutions' \
          --header 'Content-Type: application/json' \
          --header 'X-Tricentis: OK' \
          --header 'Accept-Language: de' \
          --header 'Authorization: Bearer ${{ env.TRICENTIS_ACCESS_TOKEN }}' \
          --data-raw '{
            "flowId": "${{ secrets.TRICENTIS_FLOW_ID }}",
            "timeoutInMinutes": 300
          }' \
          --output response.json

      - name: persist execution ID in environment $GITHUB_ENV
        run: echo "TRICENTIS_EXECUTION_ID=$(cat response.json | jq -r .id)" >> $GITHUB_ENV

      - name: get status of test run from Tricentis E2G
        run: |
          testFinished="no"
          while [ $testFinished = "no" ]; do
            curl \
            --location --request GET 'https://${{ secrets.TRICENTIS_TENANT }}.my.tricentis.com/default/_e2g/api/executionPackageRuns/${{ env.TRICENTIS_EXECUTION_ID }}' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer ${{ env.TRICENTIS_ACCESS_TOKEN }}' \
            --output response.json
            # check if JUnit result value json response exists and is a UUID
            if jq -r .subFlows[].units[0].results.JUnit res.json | grep -Eo [0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12} ; then
              testFinished="yes"
            fi
            sleep 10
          done

      - name: persist unit ID in environment $GITHUB_ENV
        run: echo "TRICENTIS_UNIT_ID=$(cat response.json | jq -r .subFlows[].units[0].unitId)" >> $GITHUB_ENV

      - name: get result of test run from Tricentis E2G
        run: |
          curl \
          --location --request GET 'https://${{ secrets.TRICENTIS_TENANT }}.my.tricentis.com/default/_e2g/api/executionPackageRuns/${{ env.TRICENTIS_EXECUTION_ID }}/allUnits/${{ env.TRICENTIS_UNIT_ID }}/results/JUnit' \
          --header 'Content-Type: application/json' \
          --header 'Authorization: Bearer ${{ env.TRICENTIS_ACCESS_TOKEN }}' \
          --output response.json

      - name: persist content download url in environment $GITHUB_ENV
        run: echo "TRICENTIS_CONTENT_DOWNLOAD_URL=$(cat response.json | jq -r .contentDownloadUrl)" >> $GITHUB_ENV

      - name: download JUnit test result
        run: |
          curl \
          --location --request GET ${{ env.TRICENTIS_CONTENT_DOWNLOAD_URL }} \
          --output JUnit.xml

      - name: check if 'failures="0"' in JUnit.xml
        run: |
          grep 'failures="0"' JUnit.xml

      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist
      - uses: keithweaver/aws-s3-github-action@v1.0.0
        with:
          command: cp
          flags: --recursive
          source: ./dist/todo-frontend/
          destination: s3://tmcsp-team-j-todo-app/
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_session_token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws_region: us-east-1

